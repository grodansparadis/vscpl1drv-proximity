/*
#-------------------------------------------------------------------

use strict;
use warnings;

my $rssi_threshold = -4;
my $rssi_linger    = 2;    # No. of measurements needed before changing state
my @rssi_stack     = ();
#my $near_command   = '/usr/local/bin/xscreensaver-command -deactivate';
#my $far_command    = '/usr/local/bin/xscreensaver-command -activate';
#/usr/share/xscreensaver
my $near_command   = 'echo "------------> near\n"';
my $far_command    = 'echo "------------> far\n"';
my $state          = 'far';
my $mac            = $ARGV[0] || 'BD:B2:03:00:57:89';


$|++;
printf("Monitoring RSSI for device %s (%s)\\n",$mac,devname($mac));
RSSI_CHECK: while (1) {
  # Trim the stack
  while (scalar @rssi_stack >= $rssi_linger) {
    shift @rssi_stack;
  }
  
  # Try to measure the RSSI
  my $current_rssi = read_rssi($mac);
  if ($current_rssi eq '') {
    $current_rssi = $rssi_threshold;
  }
  push @rssi_stack,$current_rssi;
  
  printf("\n[%s] RSSI = %s     ",scalar localtime,$current_rssi);
  
  # Check if we need to change state
  if ($state eq 'far') {
    foreach my $measurement (@rssi_stack) {
      next RSSI_CHECK if ($measurement <= $rssi_threshold);
    }
    $state = 'near';
    `$near_command`;
  }
  if ($state eq 'near') {
    foreach my $measurement (@rssi_stack) {
      next RSSI_CHECK if ($measurement > $rssi_threshold);
    }
    $state = 'far';
    `$far_command`;
  }
} continue {
#  sleep 1;
}

*/